// <auto-generated />
using HospitalAllocation.Model;
using HospitalAllocation.Providers.Image.Interface;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace HospitalAllocation.Migrations
{
    [DbContext(typeof(AllocationContext))]
    [Migration("20180312064102_HospitalAllocation")]
    partial class HospitalAllocation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("HospitalAllocation.Model.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("DesignationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("HospitalAllocation.Model.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents")
                        .IsRequired();

                    b.Property<long>("CreationTime");

                    b.Property<long>("LastModificationTime");

                    b.Property<int>("StaffMemberId");

                    b.HasKey("NoteId");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("HospitalAllocation.Model.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Format");

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.HasKey("PhotoId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("HospitalAllocation.Model.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AllocationId")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("ShiftType");

                    b.Property<int?>("Type")
                        .IsRequired();

                    b.HasKey("PositionId");

                    b.HasIndex("AllocationId");

                    b.ToTable("Position");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Position");
                });

            modelBuilder.Entity("HospitalAllocation.Model.PositionTypeEntry", b =>
                {
                    b.Property<int>("PositionTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("PositionTypeId");

                    b.HasAlternateKey("Type");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("HospitalAllocation.Model.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("SkillId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("HospitalAllocation.Model.StaffMember", b =>
                {
                    b.Property<int>("StaffMemberId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DesignationId");

                    b.Property<long?>("LastDouble");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PhotoId");

                    b.Property<int?>("RosterOnId");

                    b.HasKey("StaffMemberId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("PhotoId");

                    b.ToTable("StaffMembers");
                });

            modelBuilder.Entity("HospitalAllocation.Model.StaffPosition", b =>
                {
                    b.Property<int>("StaffPositionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("PositionId")
                        .IsRequired();

                    b.HasKey("StaffPositionId");

                    b.HasIndex("PositionId")
                        .IsUnique();

                    b.ToTable("StaffPosition");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StaffPosition");
                });

            modelBuilder.Entity("HospitalAllocation.Model.StaffSkill", b =>
                {
                    b.Property<int>("StaffSkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SkillId");

                    b.Property<int>("StaffMemberId");

                    b.HasKey("StaffSkillId");

                    b.HasIndex("SkillId");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("StaffSkill");
                });

            modelBuilder.Entity("HospitalAllocation.Model.TeamAllocation", b =>
                {
                    b.Property<int>("TeamAllocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Time");

                    b.Property<int?>("Type")
                        .IsRequired();

                    b.HasKey("TeamAllocationId");

                    b.HasAlternateKey("Type", "Time");

                    b.ToTable("TeamAllocations");
                });

            modelBuilder.Entity("HospitalAllocation.Model.TeamTypeEntry", b =>
                {
                    b.Property<int>("TeamTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("TeamTypeId");

                    b.HasAlternateKey("Type");

                    b.ToTable("TeamTypes");
                });

            modelBuilder.Entity("HospitalAllocation.Model.BedPosition", b =>
                {
                    b.HasBaseType("HospitalAllocation.Model.Position");

                    b.Property<int>("Position");

                    b.ToTable("BedPosition");

                    b.HasDiscriminator().HasValue("BedPosition");
                });

            modelBuilder.Entity("HospitalAllocation.Model.KnownStaffPosition", b =>
                {
                    b.HasBaseType("HospitalAllocation.Model.StaffPosition");

                    b.Property<int?>("StaffMemberId")
                        .IsRequired();

                    b.HasIndex("StaffMemberId");

                    b.ToTable("KnownStaffPosition");

                    b.HasDiscriminator().HasValue("KnownStaffPosition");
                });

            modelBuilder.Entity("HospitalAllocation.Model.UnknownStaffPosition", b =>
                {
                    b.HasBaseType("HospitalAllocation.Model.StaffPosition");

                    b.Property<string>("StaffName");

                    b.ToTable("UnknownStaffPosition");

                    b.HasDiscriminator().HasValue("UnknownStaffPosition");
                });

            modelBuilder.Entity("HospitalAllocation.Model.Note", b =>
                {
                    b.HasOne("HospitalAllocation.Model.StaffMember", "StaffMember")
                        .WithMany("Notes")
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HospitalAllocation.Model.Position", b =>
                {
                    b.HasOne("HospitalAllocation.Model.TeamAllocation", "Allocation")
                        .WithMany("Positions")
                        .HasForeignKey("AllocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HospitalAllocation.Model.StaffMember", b =>
                {
                    b.HasOne("HospitalAllocation.Model.Designation", "Designation")
                        .WithMany("StaffMembers")
                        .HasForeignKey("DesignationId");

                    b.HasOne("HospitalAllocation.Model.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("HospitalAllocation.Model.StaffPosition", b =>
                {
                    b.HasOne("HospitalAllocation.Model.Position", "Position")
                        .WithOne("StaffPosition")
                        .HasForeignKey("HospitalAllocation.Model.StaffPosition", "PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HospitalAllocation.Model.StaffSkill", b =>
                {
                    b.HasOne("HospitalAllocation.Model.Skill", "Skill")
                        .WithMany("StaffSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HospitalAllocation.Model.StaffMember", "StaffMember")
                        .WithMany("StaffSkills")
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HospitalAllocation.Model.KnownStaffPosition", b =>
                {
                    b.HasOne("HospitalAllocation.Model.StaffMember", "StaffMember")
                        .WithMany("Positions")
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
